#Kagglehub für den Datenimport installieren
%pip install kagglehub
import kagglehub
from kagglehub import KaggleDatasetAdapter


file_path = "winequality-red.csv"

#Letzte Version herunterladen
df = kagglehub.load_dataset(
  KaggleDatasetAdapter.PANDAS,
  "uciml/red-wine-quality-cortez-et-al-2009",
  file_path,)


import pandas as pd

# CSV-Datei laden (Dateiname ggf. anpassen)
df = pd.read_csv("winequality-red.csv")

# Überblick über den Datensatz verschaffen
print("Form:", df.shape)
print("\nSpalten:", df.columns.tolist())
print("\nFehlende Werte pro Spalte:\n", df.isnull().sum())

# Wir haben keine fehlenden Werte und nur numerische Daten

#Zu verwendende Modelle importieren
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
import pandas as pd


# Features und Ziel definieren (alles außerdem Qualität wird via .drop als Feature definiert, quality bleibt als Zielvariable) 
X = df.drop("quality", axis=1)
y = df["quality"]

# Trainings- und Testdaten aufteilen
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest Modell erstellen und trainieren
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Vorhersagen auf Testdaten
y_pred_rf = rf_model.predict(X_test)

# Bewertung des Modells ausgeben (statistische Werte)
print("Random Forest Regressor Ergebnisse:")
print("MSE:", mean_squared_error(y_test, y_pred_rf))
print("R²:", r2_score(y_test, y_pred_rf))


#Aufgabe 1: Welcher Faktor ist am wichtigsten für die Qualität der Weine?
#Schreibe hierzu Feature und Importance anstelle der Platzhalter und sortiere die Werte nach ihrer Wichtigkeit


#Aufgabe 2: Erstelle einen neuen Wein, indem du den neuen Data Frame (neuer_wein_df) mit 11 neuen Werten füllst.
#Führe anschließend den Code aus und lass das Modell eine Bewertung vornehmen

#Lösung Aufgabe 1 mit grafischer Darstellung durch Seaborn
#Import der Pakete zur visuellen Darstellung
import matplotlib.pyplot as plt
import seaborn as sns

importances = rf_model.feature_importances_
features = X.columns

feat_importance = pd.DataFrame({'Feature': features, 'Importance': importances})
feat_importance = feat_importance.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10,6))
sns.barplot(x='Importance', y='Feature', data=feat_importance, color='steelblue')  # nur eine Farbe
plt.title('Feature Importance - Random Forest Regressor')
plt.xlabel('Wichtigkeit')
plt.ylabel('Merkmal')
plt.tight_layout()
plt.show()
#Lösung Aufgabe 2
# Spaltennamen aus X übernehmen
columns = X.columns
neuer_wein_df = pd.DataFrame([[7.4, 0.65, 0.00, 1.9, 0.076, 11.0, 34.0, 0.9978, 3.51, 0.56, 9.4]], columns=columns)

# Vorhersage mit DataFrame auf Basis des Modells
predicted_quality = rf_model.predict(neuer_wein_df)
print(f" Vorhersage für neuen Wein: Qualität = {predicted_quality[0]:.2f}")
