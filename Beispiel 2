# Import der nötigen Pakete
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# CSV laden
df = pd.read_csv("AAPL.csv")

# Spaltennamen vereinheitlichen 
df.columns = df.columns.str.strip().str.lower()

# Datum parsen (Datumformat umwandeln)
df['date'] = pd.to_datetime(df['date'])

# Nach Datum sortieren
df = df.sort_values('date')

# Features und Ziel definieren
X = df[['open', 'high', 'low', 'volume']]
y = df['close']

# Trainings- und Testdaten aufteilen (keine Zufallsmischung bei Zeitreihen!)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Modell trainieren
model = LinearRegression()
model.fit(X_train, y_train)

# Vorhersagen
y_pred = model.predict(X_test)

# Bewertung mittels statistischer Maße
print("Mittlerer quadratischer Fehler (MSE):", mean_squared_error(y_test, y_pred))
print("R² (Bestimmtheitsmaß):", r2_score(y_test, y_pred))

# Visualisierung
plt.figure(figsize=(10,5))
plt.plot(y_test.values, label='Echte Werte', color='blue')
plt.plot(y_pred, label='Vorhergesagte Werte', color='red')
plt.title("Apple Closing Price – Lineare Regression")
plt.xlabel("Zeit (Testdaten)")
plt.ylabel("Schlusskurs (USD)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Erstelltes Diagramm speichern
plt.savefig("Apple Closing Price.pdf", format='pdf')


#Lernkurve des Modells analysieren und grafisch darstellen
from sklearn.model_selection import learning_curve

train_sizes, train_scores, test_scores = learning_curve(
    model, X, y, cv=5, scoring='neg_mean_squared_error', train_sizes=np.linspace(0.1, 1.0, 10), shuffle=True, random_state=42
)

train_scores_mean = -train_scores.mean(axis=1)
test_scores_mean = -test_scores.mean(axis=1)

plt.figure(figsize=(8, 5))
plt.plot(train_sizes, train_scores_mean, 'o-', label='Training Error')
plt.plot(train_sizes, test_scores_mean, 'o-', label='Validation Error')
plt.title("Lernkurve")
plt.xlabel("Trainingsbeispiele")
plt.ylabel("Fehler (MSE)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("Lernkurve.pdf")
plt.show()

# Random Forest Regressor importieren
from sklearn.ensemble import RandomForestRegressor

# Random-Forest-Modell erstellen und trainieren
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Vorhersagen mit Random Forest
y_pred_rf = rf_model.predict(X_test)

# Bewertung
print("\n Random Forest Ergebnisse:")
print("MSE:", mean_squared_error(y_test, y_pred_rf))
print("R²:", r2_score(y_test, y_pred_rf))

# Beispielhafte Eingabe für einen neuen Tag
new_data = pd.DataFrame([{
    'open': 194.22,
    'high': 197.34,
    'low': 193.60,
    'volume': 48532000
}])

# Vorhersage mit linearem Modell
prediction_linear = model.predict(new_data)
print(" Lineare Regression – Vorhergesagter Schlusskurs:", prediction_linear[0])

# Vorhersage mit Random Forest
prediction_rf = rf_model.predict(new_data)
print(" Random Forest – Vorhergesagter Schlusskurs:", prediction_rf[0])
